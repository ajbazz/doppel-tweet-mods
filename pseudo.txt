1. Require dopple-tweet as var
2. d1 = new DoppleTweet(config)

*config file*
	-Doppel name
	-Source accounts (for dictionary), array
	-Credentials for account to post (if using)
	-Location to save dictionary (if going to text)



The user requires the module as a variable. Then creates a new instance of a Doppel with some configuration specs
Those specs will be stored in the instance of Dopple.

Methods in the Dopple are

*Lex methods*
-populateLex - Initial loading of lexicon from sources provided in config
-updateLex - Gets new Tweets from sources and adds to lexicon
-exportLex - Exports lexicon as a JSON
-importLex - Adds lexicon data from JSON

*Lifecycle Methods*
-scrub - Runs on each Tweet recieved before adding to lexicon. Must return a string
-polish - Runs on each created Tweet. Must return a string.

*Tweet methods*
-generateTweet - Uses lex and markov to return a string
-generateTweet.publish - Publishes to saved data


----------

for getting all updated tweets

tweets[]

run function with after Id, no before Id

function(user, after Id, before Id, tweets Array)

	get API call with all tweets after last id
	(if num is 0, should get top of most recent tweets)

	save new max if higher than previous

	var nextMax

	go through each tweet and add to list
	set minId to the last one

	if there are 200 in the list, run again
		-> this time run with beforeId equal to last one


structure of lex
{
	'Word word': {
		suffix: []
		freq: []

		}


}

alias for blanks = **

initialize



